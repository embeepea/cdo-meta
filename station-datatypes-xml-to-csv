#! /usr/bin/perl

use XML::Parser::PerlSAX;

my $my_handler = MyHandler->new;
$parser = XML::Parser::PerlSAX->new( Handler => $my_handler );

#$filename = 'ghcnd-ca001165793-datatypes.xml';
#$filename = 'foo.xml';
$filename = 'ghcnd-us-stations-datatypes.xml';

$parser->parse(Source => { SystemId => $filename });

package MyHandler;

my $station;
my $current_chars = '';

sub new {
    my ($type) = @_;
    return bless {}, $type;
}

sub start_element {
    my ($self, $element) = @_;
    my %attr = %{$element->{Attributes}};

    if ($element->{Name} eq "datatypes") {
        $station = {
            id                  => $attr{'stationid'},
            dataTypeCollections => []
        };
    }

    elsif ($element->{Name} eq "dataTypeCollection") {
        if ($attr{pageCount} ne "1") {
            printf("WARNING: pageCount=%1d for station id=%s\n", $attr{pageCount}, $station->{id});
        } else {
            push(@{$station->{dataTypeCollections}}, []);
        }
    }

    $current_chars = '';
}

sub end_element {
    my ($self, $element) = @_;

    if ($element->{Name} eq "datatypes") {
        if (@{$station->{dataTypeCollections}} < 0) {
            printf("WARNING: no dataTypeCollections for station id=%s\n", $station->{id});
        }
        if (@{$station->{dataTypeCollections}} > 1) {
            printf("WARNING: multiple dataTypeCollections for station id=%s\n", $station->{id});
        }
        printf("%s:", $station->{id});
        if (@{$station->{dataTypeCollections}} > 0) {
            printf("%s\n", join(",", @{$station->{dataTypeCollections}->[0]}));
        }
    }

    elsif ($element->{Name} eq "id") {
        push(@{$station->{dataTypeCollections}->[$#{$station->{dataTypeCollections}}]}, $current_chars);
    }

}

sub characters {
    my ($self, $characters) = @_;
    my $text = $characters->{Data};

    $current_chars .= $characters->{Data};
}
